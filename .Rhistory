world <- world %>%
mutate(data_available = ifelse(name %in% data_countries, "Yes", "No"))
pal <- colorFactor(c("#D8DCDA", "#007030"), domain = c("Yes", "No"))
leaflet(world) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(data_available),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 1,
highlight = highlightOptions(weight = 2, color = "red", bringToFront = TRUE),
label = ~name
) %>%
addLegend(pal = pal, values = ~data_available, title = "Data Availability") %>%
fitBounds(lng1 = -180, lat1 = -60, lng2 = 180, lat2 =
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(rnaturalearth)
# Load world shapefile and remove Antarctica
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(name != "Antarctica")
# Simulated data: Countries with available data
data_countries <- c("United States", "Canada", "France", "Germany", "Brazil")
# Define UI
ui <- fluidPage(
titlePanel("Fixed Frame World Map"),
leafletOutput("map", width = "100%", height = "600px") # Ensure full width
)
# Define Server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Create a color column based on available data
world <- world %>%
mutate(data_available = ifelse(name %in% data_countries, "Yes", "No"))
pal <- colorFactor(c("#D8DCDA", "#007030"), domain = c("Yes", "No"))
leaflet(world) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(data_available),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 1,
highlight = highlightOptions(weight = 2, color = "red", bringToFront = TRUE),
label = ~name
%>%
addLegend(pal = pal, values = ~data_available, title = "Data Availability") %>%
fitBounds(lng1 = -180, lat1 = -60, lng2 = 180, lat2 = 85) # Fit world view
})
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(rnaturalearth)
# Load world shapefile and remove Antarctica
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(name != "Antarctica")
# Simulated data: Countries with available data
data_countries <- c("United States", "Canada", "France", "Germany", "Brazil")
# Define UI
ui <- fluidPage(
titlePanel("Fixed Frame World Map"),
leafletOutput("map", width = "100%", height = "600px") # Ensure full width
)
# Define Server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Create a color column based on available data
world <- world %>%
mutate(data_available = ifelse(name %in% data_countries, "Yes", "No"))
pal <- colorFactor(c("#D8DCDA", "#007030"), domain = c("Yes", "No"))
leaflet(world) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(data_available),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 1,
highlight = highlightOptions(weight = 2, color = "red", bringToFront = TRUE),
label = ~name
%>%
addLegend(pal = pal, values = ~data_available, title = "Data Availability") %>%
fitBounds(lng1 = -180, lat1 = -60, lng2 = 180, lat2 = 85) # Fit world view
)
}
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(rnaturalearth)
# Load world shapefile and remove Antarctica
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(name != "Antarctica")
# Simulated data: Countries with available data
data_countries <- c("United States", "Canada", "France", "Germany", "Brazil")
# Define UI
ui <- fluidPage(
titlePanel("Fixed Frame World Map"),
leafletOutput("map", width = "100%", height = "600px") # Ensure full width
)
# Define Server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Create a color column based on available data
world <- world %>%
mutate(data_available = ifelse(name %in% data_countries, "Yes", "No"))
pal <- colorFactor(c("#D8DCDA", "#007030"), domain = c("Yes", "No"))
leaflet(world) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(data_available),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 1,
highlight = highlightOptions(weight = 2, color = "red", bringToFront = TRUE),
label = ~name
%>%
addLegend(pal = pal, values = ~data_available, title = "Data Availability") %>%
fitBounds(lng1 = -180, lat1 = -60, lng2 = 180, lat2 = 85) # Fit world view
})
leaflet(world) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(data_available),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 1,
highlight = highlightOptions(weight = 2, color = "red", bringToFront = TRUE),
label = ~name
%>%
addLegend(pal = pal, values = ~data_available, title = "Data Availability") %>%
fitBounds(lng1 = -180, lat1 = -60, lng2 = 180, lat2 = 85)
})
leaflet(world) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(data_available),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 1,
highlight = highlightOptions(weight = 2, color = "red", bringToFront = TRUE),
label = ~name
%>%
addLegend(pal = pal, values = ~data_available, title = "Data Availability") %>%
fitBounds(lng1 = -180, lat1 = -60, lng2 = 180, lat2 = 85))
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(rnaturalearth)
# Load world shapefile and remove Antarctica
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(name != "Antarctica")
# Simulated data: Countries with available data
data_countries <- c("United States", "Canada", "France", "Germany", "Brazil")
# Define UI
ui <- fluidPage(
titlePanel("Fixed Frame World Map"),
leafletOutput("map", width = "100%", height = "600px") # Ensure full width
)
# Define Server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Create a color column based on available data
world <- world %>%
mutate(data_available = ifelse(name %in% data_countries, "Yes", "No"))
pal <- colorFactor(c("#D8DCDA", "#007030"), domain = c("Yes", "No"))
leaflet(world) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(data_available),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 1,
highlight = highlightOptions(weight = 2, color = "red", bringToFront = TRUE),
label = ~name
%>%
addLegend(pal = pal, values = ~data_available, title = "Data Availability") %>%
fitBounds(lng1 = -180, lat1 = -60, lng2 = 180, lat2 = 85))
}
# Load world shapefile and remove Antarctica
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(name != "Antarctica")
# Simulated data: Countries with available data
data_countries <- c("United States", "Canada", "France", "Germany", "Brazil")
# Define UI
ui <- fluidPage(
titlePanel("Fixed Frame World Map"),
leafletOutput("map", width = "100%", height = "600px") # Ensure full width
)
# Define Server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Create a color column based on available data
world <- world %>%
mutate(data_available = ifelse(name %in% data_countries, "Yes", "No"))
pal <- colorFactor(c("blue", "gray"), domain = c("Yes", "No"))
leaflet(world) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(data_available),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 2, color = "red", bringToFront = TRUE),
label = ~name
) %>%
addLegend(pal = pal, values = ~data_available, title = "Data Availability") %>%
fitBounds(lng1 = -180, lat1 = -60, lng2 = 180, lat2 = 85) # Fit world view
})
}
# Run the App
shinyApp(ui, server)
View(world)
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(rnaturalearth)
# Load world shapefile and remove Antarctica
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(name != "Antarctica")
# Simulated data: Countries with available data
data_countries <- c("United States of America", "Canada", "France", "Germany", "Brazil")
# Define UI
ui <- fluidPage(
titlePanel("Fixed Frame World Map"),
leafletOutput("map", width = "100%", height = "600px") # Ensure full width
)
# Define Server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Create a color column based on available data
world <- world %>%
mutate(data_available = ifelse(name %in% data_countries, "Yes", "No"))
pal <- colorFactor(c("#D8DCDA", "#007030"), domain = c("Yes", "No"))
leaflet(world) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(data_available),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 2, color = "red", bringToFront = TRUE),
label = ~name
) %>%
addLegend(pal = pal, values = ~data_available, title = "Data Availability") %>%
fitBounds(lng1 = -180, lat1 = -60, lng2 = 180, lat2 = 85) # Fit world view
})
}
# Run the App
shinyApp(ui, server)
# Load world shapefile and remove Antarctica
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(name != "Antarctica")
# Simulated data: Countries with available data
data_countries <- c("United States of America", "Canada", "France", "Germany", "Brazil")
# Define UI
ui <- fluidPage(
titlePanel("Fixed Frame World Map"),
leafletOutput("map", width = "100%", height = "600px") # Ensure full width
)
# Define Server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Create a color column based on available data
world <- world %>%
mutate(data_available = ifelse(name %in% data_countries, "Yes", "No"))
pal <- colorFactor(c("#D8DCDA", "#007030"), domain = c("Yes", "No"))
leaflet(world) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(data_available),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 1,
highlight = highlightOptions(weight = 2, color = "red", bringToFront = TRUE),
label = ~name
) %>%
addLegend(pal = pal, values = ~data_available, title = "Data Availability") %>%
fitBounds(lng1 = -180, lat1 = -60, lng2 = 180, lat2 = 85) # Fit world view
})
}
# Run the App
shinyApp(ui, server)
# Load world shapefile and remove Antarctica
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(name != "Antarctica")
# Simulated data: Countries with available data
data_countries <- c("United States of America", "Canada", "France", "Germany", "Brazil")
# Define UI
ui <- fluidPage(
titlePanel("World Map"),
leafletOutput("map") # Ensure full width
)
# Define Server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Create a color column based on available data
world <- world %>%
mutate(data_available = ifelse(name %in% data_countries, "Yes", "No"))
pal <- colorFactor(c("#D8DCDA", "#007030"), domain = c("Yes", "No"))
leaflet(world) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(data_available),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 1,
highlight = highlightOptions(weight = 2, color = "red", bringToFront = TRUE),
label = ~name
) %>%
addLegend(pal = pal, values = ~data_available, title = "Data Availability") %>%
fitBounds(lng1 = -180, lat1 = -60, lng2 = 180, lat2 = 85) # Fit world view
})
}
# Run the App
shinyApp(ui, server)
shiny::runApp('Desktop/new/capstone640')
runApp('Desktop/new/capstone640')
runApp('Desktop/new/capstone640')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='leah-peters0n',
token='52546DFFC0ED7DAA969B34832C867BBC',
secret='<SECRET>')
rsconnect::setAccountInfo(name='leah-peters0n',
token='52546DFFC0ED7DAA969B34832C867BBC',
secret='<SECRET>')
rsconnect::setAccountInfo(name='leah-peters0n',
token='52546DFFC0ED7DAA969B34832C867BBC',
secret='zUKaXJn8quhdnd3UZMWu2UkK2B8SMWAQO+eFLnfg')
library(rsconnect)
here()
here::here()
shiny::runApp('Desktop/640Project')
runApp('Desktop/640Project')
runApp('Desktop/640Project')
runApp('Desktop/640Project')
runApp('Desktop/640Project')
runApp('Desktop/640Project')
HEDCO <- read_excel("data/Depression_HEDCCO.xlsx", sheet = 2)
getwd()
world_data <- readRDS("data/world_data.rds")
setwd("/Users/leahpeterson/Desktop/640Project")
getwd
getwd()
HEDCO <- read_excel("data/Depression_HEDCCO.xlsx", sheet = 2)
depression_rates <- read_csv("data/depression_prevelance.csv")
world_data <- readRDS("data/world_data.rds")
unique(HEDCO$grade_level)
unique(HEDCO$grade_group)
runApp()
runApp()
HEDCO_expanded <- HEDCO %>%
separate_rows(grade_group, sep = ", ") %>%  # Split at ", "
mutate(grade_group = trimws(grade_group))  # Trim whitespace
View(HEDCO_expanded)
HEDCO <- read_excel("data/Depression_HEDCCO.xlsx", sheet = 2)
HEDCO_dummies <- HEDCO_expanded %>%
mutate(
K_5 = ifelse(grade_group == "Grades K-5" | grade_group == "K-Grade 5", 1, 0),
G6_8 = ifelse(grade_group == "Grades 6-8", 1, 0),
G9_12 = ifelse(grade_group == "Grades 9-12", 1, 0),
Not_Reported = ifelse(grade_group == "Not Reported", 1, 0)
) %>%
group_by(primary_study_id) %>%  # Assuming there's a unique ID for each original row
summarise(across(K_5:Not_Reported, max))
View(HEDCO_dummies)
# Merge back into single row per original ID
HEDCO <- left_join(HEDCO, HEDCO_dummies, by = "primary_study_id")  # Merge back with original data
runApp()
runApp()
zobserve({
print(input$grade_level)  # Check what's being passed
})
observe({
print(input$grade_level)  # Check what's being passed
})
observe({
print(input$grade_level)  # Check what's being passed
})
runApp()
print(filtered_countries)  # Should list country names
filtered_countries <- HEDCO %>%
filter(
(length(input$inter_admin) == 0 | inter_admin %in% input$inter_admin),
(length(input$study_year_group) == 0 | study_year_group %in% input$study_year_group),
grade_filter  # ✅ Apply fixed grade-level filter
) %>%
pull(country)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
unique(HEDCO$inter_admin)
HEDCO <- read_excel("data/Depression_HEDCCO.xlsx", sheet = 2)
unique(HEDCO$inter_admin)
runApp()
unique(HEDCO$grade_group)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
study_details <- HEDCO %>% filter(study_author_year == HEDCO$study_author_year[i])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
leafletOptions()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
HEDCO <- read_excel("data/Depression_HEDCO.xlsx", sheet = 2)
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(rnaturalearth)
library(readr)
library(janitor)
library(readxl)
library(rsconnect)
depression_rates <- read_csv("data/depression_prevelance.csv")
HEDCO <- read_excel("data/Depression_HEDCO.xlsx", sheet = 2)
world_data <- readRDS("data/world_data.rds")
View(HEDCO)
HEDCO <- read_excel("data/Depression_HEDCO.xlsx", sheet = 2)
View(HEDCO)
HEDCO <- read_excel("data/Depression_HEDCO.xlsx", sheet = 2)
runApp()
HEDCO <- read_excel("data/Depression_HEDCO.xlsx", sheet = 2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
is.numeric(study_details$effect_size)
is.numeric(HEDCO$effect_size)
runApp()
runApp()
runApp()
runApp()
runApp()
